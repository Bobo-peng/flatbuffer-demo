// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CITY_LOCATION_H_
#define FLATBUFFERS_GENERATED_CITY_LOCATION_H_

#include "flatbuffers/flatbuffers.h"

namespace Location {

struct City_Fb;

struct Provice_Fb;

struct City_Fb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CITY_NAME = 4,
    VT_AREA_CODE = 6
  };
  const flatbuffers::String *city_name() const {
    return GetPointer<const flatbuffers::String *>(VT_CITY_NAME);
  }
  const flatbuffers::String *area_code() const {
    return GetPointer<const flatbuffers::String *>(VT_AREA_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CITY_NAME) &&
           verifier.VerifyString(city_name()) &&
           VerifyOffset(verifier, VT_AREA_CODE) &&
           verifier.VerifyString(area_code()) &&
           verifier.EndTable();
  }
};

struct City_FbBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_city_name(flatbuffers::Offset<flatbuffers::String> city_name) {
    fbb_.AddOffset(City_Fb::VT_CITY_NAME, city_name);
  }
  void add_area_code(flatbuffers::Offset<flatbuffers::String> area_code) {
    fbb_.AddOffset(City_Fb::VT_AREA_CODE, area_code);
  }
  explicit City_FbBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  City_FbBuilder &operator=(const City_FbBuilder &);
  flatbuffers::Offset<City_Fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<City_Fb>(end);
    return o;
  }
};

inline flatbuffers::Offset<City_Fb> CreateCity_Fb(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> city_name = 0,
    flatbuffers::Offset<flatbuffers::String> area_code = 0) {
  City_FbBuilder builder_(_fbb);
  builder_.add_area_code(area_code);
  builder_.add_city_name(city_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<City_Fb> CreateCity_FbDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *city_name = nullptr,
    const char *area_code = nullptr) {
  auto city_name__ = city_name ? _fbb.CreateString(city_name) : 0;
  auto area_code__ = area_code ? _fbb.CreateString(area_code) : 0;
  return Location::CreateCity_Fb(
      _fbb,
      city_name__,
      area_code__);
}

struct Provice_Fb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CITY_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Location::City_Fb>> *city_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Location::City_Fb>> *>(VT_CITY_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CITY_LIST) &&
           verifier.VerifyVector(city_list()) &&
           verifier.VerifyVectorOfTables(city_list()) &&
           verifier.EndTable();
  }
};

struct Provice_FbBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_city_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Location::City_Fb>>> city_list) {
    fbb_.AddOffset(Provice_Fb::VT_CITY_LIST, city_list);
  }
  explicit Provice_FbBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Provice_FbBuilder &operator=(const Provice_FbBuilder &);
  flatbuffers::Offset<Provice_Fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Provice_Fb>(end);
    return o;
  }
};

inline flatbuffers::Offset<Provice_Fb> CreateProvice_Fb(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Location::City_Fb>>> city_list = 0) {
  Provice_FbBuilder builder_(_fbb);
  builder_.add_city_list(city_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<Provice_Fb> CreateProvice_FbDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Location::City_Fb>> *city_list = nullptr) {
  auto city_list__ = city_list ? _fbb.CreateVector<flatbuffers::Offset<Location::City_Fb>>(*city_list) : 0;
  return Location::CreateProvice_Fb(
      _fbb,
      city_list__);
}

inline const Location::Provice_Fb *GetProvice_Fb(const void *buf) {
  return flatbuffers::GetRoot<Location::Provice_Fb>(buf);
}

inline const Location::Provice_Fb *GetSizePrefixedProvice_Fb(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Location::Provice_Fb>(buf);
}

inline bool VerifyProvice_FbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Location::Provice_Fb>(nullptr);
}

inline bool VerifySizePrefixedProvice_FbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Location::Provice_Fb>(nullptr);
}

inline void FinishProvice_FbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Location::Provice_Fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProvice_FbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Location::Provice_Fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Location

#endif  // FLATBUFFERS_GENERATED_CITY_LOCATION_H_
